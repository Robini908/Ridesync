generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleType {
  BUS
  MINIBUS
  SHUTTLE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum Amenity {
  WIFI
  AC
  ACCESSIBILITY
  POWER
  RESTROOM
  ENTERTAINMENT
  MEALS
  LUGGAGE_SPACE
}

enum UserRole {
  USER
  OPERATOR
  ADMIN
  SUPER_ADMIN
  DRIVER
  SUPPORT
  TENANT_ADMIN
  TENANT_USER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  BOOKING_CONFIRMATION
  PAYMENT_SUCCESS
  TRIP_REMINDER
  DELAY_NOTIFICATION
  CANCELLATION
  PROMOTION
  SYSTEM_UPDATE
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  TRIALING
}

enum ServiceType {
  CORE_BOOKING      // Always available
  ANALYTICS         // Subscription-based
  WHITE_LABELING    // Subscription-based
  API_ACCESS        // Subscription-based
  ADVANCED_REPORTS  // Subscription-based
  CUSTOM_BRANDING   // Subscription-based
  EMAIL_MARKETING   // Subscription-based
  MOBILE_APP        // Subscription-based
}

// Multi-tenant organization model
model Tenant {
  id                String               @id @default(cuid())
  name              String
  slug              String               @unique // Subdomain identifier
  domain            String?              @unique // Custom domain (premium feature)
  
  // Branding & Customization
  logo              String?              // Logo URL
  favicon           String?              // Favicon URL
  primaryColor      String               @default("#000000")
  secondaryColor    String               @default("#ffffff")
  accentColor       String               @default("#007bff")
  fontFamily        String               @default("Inter")
  customCss         String?              // Custom CSS overrides
  
  // Contact & Business Info
  email             String
  phone             String?
  address           String?
  city              String?
  country           String               @default("US")
  timezone          String               @default("UTC")
  language          String               @default("en")
  
  // Features & Limits
  isActive          Boolean              @default(true)
  isVerified        Boolean              @default(false)
  maxUsers          Int                  @default(10)
  maxOperators      Int                  @default(3)
  maxBookingsPerMonth Int                @default(1000)
  
  // Subscription & Billing
  subscriptionTier  SubscriptionTier     @default(FREE)
  subscriptionStatus SubscriptionStatus  @default(TRIALING)
  trialEndsAt       DateTime?
  billingEmail      String?
  
  // Metadata
  metadata          Json?                // Additional tenant data
  settings          Json?                // Tenant-specific settings
  
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  // Relations
  users             User[]
  operators         Operator[]
  subscriptions     TenantSubscription[]
  serviceAccess     TenantServiceAccess[]
  emailTemplates    EmailTemplate[]
  analytics         TenantAnalytics[]
  auditLogs         AuditLog[]
  
  // File uploads for branding
  brandingAssets    BrandingAsset[]
  
  @@index([slug])
  @@index([domain])
  @@index([subscriptionTier])
  @@index([isActive])
}

// Subscription management for tenants
model TenantSubscription {
  id                  String             @id @default(cuid())
  tenant              Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId            String
  
  tier                SubscriptionTier
  status              SubscriptionStatus
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean            @default(false)
  canceledAt          DateTime?
  
  // Stripe integration
  stripeSubscriptionId String?           @unique
  stripeCustomerId    String?
  stripePriceId       String?
  
  // Billing
  amountCents         Int
  currency            String             @default("USD")
  billingCycle        String             @default("monthly") // monthly, yearly
  
  // Usage tracking
  usageLimit          Json?              // Service-specific limits
  currentUsage        Json?              // Current usage stats
  
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  @@index([tenantId])
  @@index([stripeSubscriptionId])
  @@index([status])
}

// Service access control per tenant
model TenantServiceAccess {
  id         String      @id @default(cuid())
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId   String
  
  serviceType ServiceType
  isEnabled   Boolean     @default(false)
  
  // Usage limits and restrictions
  usageLimit  Int?        // Monthly limit for this service
  currentUsage Int        @default(0)
  resetDate   DateTime?   // When usage counter resets
  
  // Feature-specific data
  metadata    Json?       // Service-specific configuration
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([tenantId, serviceType])
  @@index([tenantId])
  @@index([serviceType])
}

// Email template customization per tenant
model EmailTemplate {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  
  type        String   // booking_confirmation, payment_success, etc.
  name        String
  subject     String
  htmlContent String   // MJML or HTML content
  textContent String?  // Plain text fallback
  
  // Template variables and customization
  variables   Json?    // Available template variables
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  
  // Usage tracking
  sentCount   Int      @default(0)
  lastSentAt  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([tenantId, type, isDefault])
  @@index([tenantId])
  @@index([type])
}

// Tenant branding assets (logos, images, etc.)
model BrandingAsset {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  
  type        String   // logo, favicon, banner, background
  name        String
  url         String   // File URL (UploadThing or similar)
  fileSize    Int
  mimeType    String
  
  // Image specific
  width       Int?
  height      Int?
  alt         String?
  
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tenantId])
  @@index([type])
}

// Analytics per tenant
model TenantAnalytics {
  id            String   @id @default(cuid())
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId      String
  
  date          DateTime @db.Date
  
  // Booking metrics
  totalBookings     Int @default(0)
  confirmedBookings Int @default(0)
  cancelledBookings Int @default(0)
  totalRevenue      Int @default(0) // in cents
  
  // User metrics
  newUsers         Int @default(0)
  activeUsers      Int @default(0)
  totalUsers       Int @default(0)
  
  // Operator metrics
  activeOperators  Int @default(0)
  totalTrips       Int @default(0)
  occupancyRate    Float @default(0)
  
  // Service usage
  apiCalls         Int @default(0)
  emailsSent       Int @default(0)
  reportsGenerated Int @default(0)
  
  metadata         Json? // Additional metrics
  
  createdAt        DateTime @default(now())
  
  @@unique([tenantId, date])
  @@index([tenantId])
  @@index([date])
}

// Audit log for tenant actions
model AuditLog {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId    String
  
  userId      String?  // User who performed the action
  userEmail   String?  // Email of the user
  
  action      String   // Action performed
  resource    String   // Resource affected
  resourceId  String?  // ID of the affected resource
  
  changes     Json?    // Before/after changes
  metadata    Json?    // Additional context
  
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

// Updated User model with tenant relationship
model User {
  id                String      @id @default(cuid())
  externalId        String      @unique // Clerk user ID
  email             String      @unique
  firstName         String?
  lastName          String?
  phone             String?
  avatar            String?
  role              UserRole    @default(USER)
  permissions       String[]    @default([]) // Specific permissions array
  isActive          Boolean     @default(true)
  preferences       Json?       // AI preferences, favorite routes, etc.
  loyaltyPoints     Int         @default(0)
  totalTrips        Int         @default(0)
  isEmailVerified   Boolean     @default(false)
  isPhoneVerified   Boolean     @default(false)
  language          String      @default("en")
  timezone          String      @default("UTC")
  lastLoginAt       DateTime?
  metadata          Json?       // Additional user data
  
  // Multi-tenant support
  tenant            Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId          String?     // Null for platform users, set for tenant users
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  bookings          Booking[]
  reviews           Review[]
  notifications     Notification[]
  savedRoutes       SavedRoute[]
  paymentMethods    PaymentMethod[]
  operatedVehicles  Vehicle[]   @relation("DriverVehicles") // For drivers
  supportTickets    SupportTicket[] @relation("UserTickets")
  assignedTickets   SupportTicket[] @relation("SupportAgent")
  
  @@index([tenantId])
  @@index([email])
  @@index([role])
}

// Updated Operator model with tenant relationship
model Operator {
  id              String     @id @default(cuid())
  name            String
  description     String?
  email           String     @unique
  phone           String?
  website         String?
  logo            String?
  rating          Float      @default(0)
  totalReviews    Int        @default(0)
  isVerified      Boolean    @default(false)
  licenseNumber   String?
  address         String?
  city            String?
  country         String?
  coordinates     Json?      // {lat, lng}
  businessHours   Json?      // Operating hours
  policies        Json?      // Cancellation, refund policies
  
  // Multi-tenant support
  tenant          Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId        String
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relations
  vehicles        Vehicle[]
  routes          Route[]
  trips           Trip[]
  analytics       OperatorAnalytics[]
  
  @@index([tenantId])
  @@index([email])
}

model Vehicle {
  id              String        @id @default(cuid())
  operator        Operator      @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  operatorId      String
  name            String
  type            VehicleType
  model           String?
  year            Int?
  seats           Int
  amenities       Amenity[]
  licensePlate    String        @unique
  color           String?
  images          String[]      // Array of image URLs
  features        Json?         // Additional features
  isActive        Boolean       @default(true)
  currentLocation Json?         // {lat, lng, timestamp}
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  status          String        @default("available") // available, in_use, maintenance, inactive
  
  // Driver assignment
  assignedDriverId String?
  assignedDriver   User?         @relation("DriverVehicles", fields: [assignedDriverId], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  trips           Trip[]
}

model Route {
  id              String      @id @default(cuid())
  operator        Operator    @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  operatorId      String
  name            String?     // Route name/identifier
  fromCity        String
  toCity          String
  fromAddress     String?
  toAddress       String?
  fromCoordinates Json        // {lat, lng}
  toCoordinates   Json        // {lat, lng}
  waypoints       Json?       // Array of intermediate stops
  distanceKm      Float
  estimatedDuration Int       // in minutes
  isActive        Boolean     @default(true)
  description     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  trips           Trip[]
  savedRoutes     SavedRoute[]
}

model Trip {
  id              String      @id @default(cuid())
  operator        Operator    @relation(fields: [operatorId], references: [id])
  operatorId      String
  route           Route       @relation(fields: [routeId], references: [id])
  routeId         String
  vehicle         Vehicle     @relation(fields: [vehicleId], references: [id])
  vehicleId       String
  departureDate   String      // YYYY-MM-DD
  departureTime   String      // HH:MM
  arrivalTime     String?     // HH:MM (estimated)
  basePriceCents  Int
  currentPriceCents Int       // Dynamic pricing
  totalSeats      Int
  availableSeats  Int
  bookedSeats     Int         @default(0)
  status          String      @default("scheduled") // scheduled, in_progress, completed, cancelled
  actualDepartureTime String?
  actualArrivalTime String?
  delayMinutes    Int         @default(0)
  cancellationReason String?
  driverInfo      Json?       // Driver details
  realTimeLocation Json?      // Current vehicle location
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  bookings        Booking[]
  tripUpdates     TripUpdate[]
}

model Booking {
  id                String         @id @default(cuid())
  trip              Trip           @relation(fields: [tripId], references: [id])
  tripId            String
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  passengerName     String
  passengerEmail    String
  passengerPhone    String?
  seats             Int
  seatNumbers       String[]       // Specific seat assignments
  totalPriceCents   Int
  status            BookingStatus  @default(PENDING)
  paymentIntentId   String?
  paymentStatus     PaymentStatus  @default(PENDING)
  confirmationCode  String         @unique
  pickupLocation    Json?          // {address, coordinates}
  dropoffLocation   Json?          // {address, coordinates}
  specialRequests   String?
  cancellationReason String?
  refundAmount      Int?
  bookingSource     String         @default("web") // web, mobile, api
  metadata          Json?          // Additional booking data
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  reviews           Review[]
  notifications     Notification[]
  payments          Payment[]
  supportTickets    SupportTicket[]
  mpesaTransactions MPesaTransaction[]
  passengers        BookingPassenger[]
}

model BookingPassenger {
  id              String   @id @default(cuid())
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId       String
  name            String
  email           String
  phone           String
  seatNumber      String
  specialRequests String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([bookingId, seatNumber])
}

model Review {
  id          String   @id @default(cuid())
  booking     Booking  @relation(fields: [bookingId], references: [id])
  bookingId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  rating      Int      // 1-5 stars
  comment     String?
  categories  Json?    // Rating breakdown (comfort, punctuality, cleanliness, etc.)
  isVerified  Boolean  @default(false)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id              String        @id @default(cuid())
  booking         Booking       @relation(fields: [bookingId], references: [id])
  bookingId       String
  amountCents     Int
  currency        String        @default("USD")
  paymentMethod   String        // stripe, paypal, mpesa, etc.
  paymentIntentId String?
  transactionId   String?
  status          PaymentStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PaymentMethod {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  type            String   // card, bank_account, digital_wallet
  provider        String   // stripe, paypal, etc.
  lastFour        String?
  expiryMonth     Int?
  expiryYear      Int?
  isDefault       Boolean  @default(false)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notification {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  booking     Booking?         @relation(fields: [bookingId], references: [id])
  bookingId   String?
  type        NotificationType
  title       String
  message     String
  data        Json?            // Additional notification data
  isRead      Boolean          @default(false)
  sentAt      DateTime?
  createdAt   DateTime         @default(now())
}

model SavedRoute {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  route     Route    @relation(fields: [routeId], references: [id])
  routeId   String
  nickname  String?
  createdAt DateTime @default(now())
  
  @@unique([userId, routeId])
}

model TripUpdate {
  id        String   @id @default(cuid())
  trip      Trip     @relation(fields: [tripId], references: [id])
  tripId    String
  type      String   // delay, location, status_change, etc.
  message   String
  data      Json?
  createdAt DateTime @default(now())
}

model OperatorAnalytics {
  id            String   @id @default(cuid())
  operator      Operator @relation(fields: [operatorId], references: [id])
  operatorId    String
  date          DateTime
  totalBookings Int      @default(0)
  totalRevenue  Int      @default(0) // in cents
  totalTrips    Int      @default(0)
  occupancyRate Float    @default(0)
  averageRating Float    @default(0)
  metadata      Json?    // Additional analytics data
  createdAt     DateTime @default(now())
  
  @@unique([operatorId, date])
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model SupportTicket {
  id          String   @id @default(cuid())
  ticketNumber String  @unique
  subject     String
  description String
  status      String   @default("open") // open, in_progress, resolved, closed
  priority    String   @default("medium") // low, medium, high, urgent
  category    String   // technical, billing, booking, complaint, etc.
  
  // User relations
  userId      String
  user        User     @relation("UserTickets", fields: [userId], references: [id], onDelete: Cascade)
  
  assignedToId String?
  assignedTo   User?    @relation("SupportAgent", fields: [assignedToId], references: [id])
  
  // Optional booking relation
  bookingId   String?
  booking     Booking? @relation(fields: [bookingId], references: [id])
  
  // Metadata
  attachments String[] @default([])
  tags        String[] @default([])
  resolution  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
}

model MPesaTransaction {
  id                  String   @id @default(cuid())
  merchantRequestId   String   @unique
  checkoutRequestId   String   @unique
  bookingId          String
  booking            Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  phoneNumber        String
  amount             Int      // Amount in KES
  status             String   // initiated, completed, failed, cancelled
  resultCode         Int?
  resultDesc         String?
  transactionId      String?  // M-Pesa receipt number
  accountReference   String
  transactionDesc    String
  metadata           Json?    // Additional transaction data
  createdAt          DateTime @default(now())
  processedAt        DateTime?
}