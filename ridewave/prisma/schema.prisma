generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleType {
  BUS
  MINIBUS
  SHUTTLE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum Amenity {
  WIFI
  AC
  ACCESSIBILITY
  POWER
  RESTROOM
}

model Operator {
  id          String   @id @default(cuid())
  name        String
  description String?
  rating      Float    @default(0)
  vehicles    Vehicle[]
  routes      Route[]
  trips       Trip[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vehicle {
  id           String      @id @default(cuid())
  operator     Operator    @relation(fields: [operatorId], references: [id])
  operatorId   String
  name         String
  type         VehicleType
  seats        Int
  amenities    Amenity[]
  licensePlate String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  trips        Trip[]
}

model Route {
  id        String   @id @default(cuid())
  operator  Operator @relation(fields: [operatorId], references: [id])
  operatorId String
  fromCity  String
  toCity    String
  distanceKm Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trips     Trip[]
}

model Trip {
  id             String   @id @default(cuid())
  operator       Operator @relation(fields: [operatorId], references: [id])
  operatorId     String
  route          Route    @relation(fields: [routeId], references: [id])
  routeId        String
  vehicle        Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId      String
  departureDate  String
  departureTime  String
  priceCents     Int
  availableSeats Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bookings       Booking[]
}

model Booking {
  id               String        @id @default(cuid())
  trip             Trip          @relation(fields: [tripId], references: [id])
  tripId           String
  userExternalId   String        // Clerk user id
  seats            Int
  status           BookingStatus @default(PENDING)
  paymentIntentId  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  reviews          Review[]
}

model Review {
  id        String   @id @default(cuid())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}