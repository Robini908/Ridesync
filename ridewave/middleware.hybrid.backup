import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Define public routes that don't require authentication
const isPublicRoute = createRouteMatcher([
  '/',
  '/search',
  '/search/(.*)',
  '/sign-in(.*)',
  '/sign-up(.*)',
  '/api/webhooks(.*)',
  '/api/uploadthing(.*)',
  '/about',
  '/contact',
  '/privacy',
  '/terms',
  '/api/public(.*)'
])

// Define protected routes that require authentication
const isProtectedRoute = createRouteMatcher([
  '/dashboard(.*)',
  '/operators/dashboard(.*)',
  '/driver/dashboard(.*)',
  '/admin(.*)',
  '/booking(.*)',
  '/profile(.*)',
  '/api/protected(.*)'
])

export default clerkMiddleware((auth, req) => {
  const { pathname } = req.nextUrl
  
  // Allow public routes to pass through without authentication
  if (isPublicRoute(req)) {
    return NextResponse.next()
  }
  
  // For protected routes, require authentication
  if (isProtectedRoute(req)) {
    auth().protect()
    return NextResponse.next()
  }
  
  // Handle /operators route specially - it can be public for viewing but protected for dashboard
  if (pathname === '/operators') {
    // Allow public access to operators listing page
    return NextResponse.next()
  }
  
  // Default behavior - allow through but don't require auth
  return NextResponse.next()
})

export const config = {
  matcher: [
    // Skip Next.js internals and all static files, unless found in search params
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    // Always run for API routes
    '/(api|trpc)(.*)',
  ],
}